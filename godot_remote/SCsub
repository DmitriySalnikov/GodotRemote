# SCsub
import lib_utils
Import('env')
module_env = env.Clone()

from SCons.Variables import BoolVariable, EnumVariable
opts = Variables([], ARGUMENTS)

opts.Add(BoolVariable("godot_remote_tracy_enabled", "Godot Remote. Enable tracy profiler.", False))
opts.Add(BoolVariable("godot_remote_libjpeg_turbo_enabled", "Godot Remote. Enable libjpeg-turbo.", True))
opts.Add(BoolVariable("godot_remote_h264_enabled", "Godot Remote. Enable OpenH264 codec.", True))
opts.Add(BoolVariable("godot_remote_no_default_resources", "Godot Remote. Remove default resources.", False))
opts.Add(BoolVariable("godot_remote_disable_server", "Godot Remote. Remove server.", False))
opts.Add(BoolVariable("godot_remote_disable_client", "Godot Remote. Remove client.", False))
opts.Add(BoolVariable("godot_remote_use_sse2", "Godot Remote. Use SSE2 to convert YUV to RGB for the H264 codec. Only on PC.", True))
#opts.Add(BoolVariable("godot_remote_livepp", "Godot Remote. Live++ support... Windows only", False))
opts.Update(module_env)

if module_env['platform'] not in ['windows', 'x11', 'linuxbsd', 'osx']:
    module_env['godot_remote_use_sse2'] = False

Help(opts.GenerateHelpText(module_env))

if module_env['godot_remote_no_default_resources']:
    module_env.Append(CPPDEFINES=['NO_GODOTREMOTE_DEFAULT_RESOURCES'])
if module_env['godot_remote_libjpeg_turbo_enabled']:
    module_env.Append(CPPDEFINES=['GODOTREMOTE_LIBJPEG_TURBO_ENABLED'])
if module_env['godot_remote_disable_server']:
    module_env.Append(CPPDEFINES=['NO_GODOTREMOTE_SERVER'])
if module_env['godot_remote_disable_client']:
    module_env.Append(CPPDEFINES=['NO_GODOTREMOTE_CLIENT'])
if module_env['godot_remote_use_sse2']:
    module_env.Append(CPPDEFINES=['GODOT_REMOTE_USE_SSE2'])

module_dir = "#modules/godot_remote/"
module_env.Append(CPPPATH=[module_dir])

src_files = [
    'GodotRemote.cpp',
    'GRAVGCounter.cpp',
    'GRClient.cpp',
    'GRDevice.cpp',
    'GRInputData.cpp',
    'GRNotifications.cpp',
    'GRPacket.cpp',
    'GRProfiler.cpp',
    'GRProfilerViewportMiniPreview.cpp',
    'GRResources.cpp',
    'GRServer.cpp',
    'GRStreamDecoders.cpp',
    'GRStreamDecoderH264.cpp',
    'GRStreamDecoderImageSequence.cpp',
    'GRStreamEncoders.cpp',
    'GRStreamEncoderH264.cpp',
    'GRStreamEncoderImageSequence.cpp',
    'GRUtils.cpp',
    'GRUtilsH264Codec.cpp',
    'GRUtilsJPGCodec.cpp',
    'register_types.cpp',
]


def get_sources():
    return [module_dir + file for file in src_files]

# 'CXXFLAGS' 'CCFLAGS' 'LINKFLAGS' and others
def remove_flag_cxx(flags_group : str, flags : []):
    for f in flags:
        if f in module_env[flags_group]:
            module_env[flags_group].remove(f)

# Tracy
if module_env['godot_remote_tracy_enabled']:
	src_files.append('tracy/TracyClient.cpp')
	module_env.Append(CPPDEFINES=['GODOTREMOTE_TRACY_ENABLED', 'TRACY_ENABLE', 'TRACY_ON_DEMAND', 'TRACY_DELAYED_INIT', 'TRACY_MANUAL_LIFETIME'])
	#module_env.Append(CPPDEFINES=['TRACY_CALLSTACK'])

# libturbo-jpeg
if module_env['godot_remote_libjpeg_turbo_enabled']:
    # an absolutely stupid system that doesn't allow me to link libraries 
    # inside this module without 'LIBSUFFIX' required this hack
    lib_utils.prepare_turbo_jpeg(env)
else:
    src_files.append('jpge.cpp')

# OpenH264
if module_env['godot_remote_h264_enabled']:
    module_env.Append(CPPDEFINES=['GODOTREMOTE_H264_ENABLED'])
    lib_utils.prepare_h264(env)

# RPATH can be used to specify a list of paths to shared find libs
# env.Append(RPATH=["."])

# platform specific
if module_env['platform'] == 'windows':
    #if module_env['godot_remote_livepp']:
    #    module_env.Append(CPPDEFINES=['GODOTREMOTE_LIVEPP'])
    #    module_env.AppendUnique(LINKFLAGS=['/OPT:NOREF', '/FUNCTIONPADMIN', '/Zi', '/FS'])

    #    if '/OPT:REF' in module_env['LINKFLAGS']:
    #        module_env['LINKFLAGS'].remove('/OPT:REF')     
    #    if '/GL' in module_env['LINKFLAGS']:
    #        module_env['LINKFLAGS'].remove('/GL')
    
    if module_env['target'] == 'release_debug':
        remove_flag_cxx('CCFLAGS', ['/O2', '/O1'])
        module_env.AppendUnique(CCFLAGS=['/Zi', '/FS'])
    
    module_env.Append(CXXFLAGS=['/std:c++14'])
    module_env.add_source_files(env.modules_sources, get_sources())

else:
    module_env.Append(CXXFLAGS=['-std=c++14']) # Flags for C++ code only
    module_env.Append(CCFLAGS=['-O2']) # Flags for C and C++ code
    
    if ARGUMENTS.get('godot_remote_shared', 'no') == 'yes':
        module_env.Append(CCFLAGS=['-fPIC']) # Flags for C and C++ code
        module_env['LIBS'] = []
        module_env['STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME'] = True
        shared_lib = module_env.SharedLibrary(target='#bin/godot_remote', source=get_sources())

        shared_lib_shim = shared_lib[0].name.rsplit('.', 1)[0]
        env.Append(LIBS=[shared_lib_shim])
        env.Append(LIBPATH=['#bin'])
    else:
        module_env.add_source_files(env.modules_sources, get_sources())